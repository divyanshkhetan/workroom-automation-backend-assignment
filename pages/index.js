import Head from "next/head";
import axios from "axios";
import { useState } from "react";
import { useRouter } from "next/router";

import DeleteUserModal from "../components/deleteUserModal";
import NewUserModal from "../components/newUserModal";
import UpdateUserModal from "../components/updateUserModal";

export default function Home({ users }) {
  const [deleteModal, setDeleteModal] = useState(false);
  const [newUserModal, setNewUserModal] = useState(false);
  const [updateUserModal, setUpdateUserModal] = useState(false);
  const [userIdx, setUserIdx] = useState(0);
  const router = useRouter();

  const refreshData = () => {
    router.replace(router.asPath);
  };

  function updateHandler(idx) {
    setUpdateUserModal(true);
    setDeleteModal(false);
    setNewUserModal(false);
    setUserIdx(idx);
  }

  function deleteHandler(idx) {
    setDeleteModal(true);
    setUpdateUserModal(false);
    setNewUserModal(false);
    setUserIdx(idx);
  }

  function newUserHandler() {
    setNewUserModal(true);
    setDeleteModal(false);
    setUpdateUserModal(false);
  }

  return (
    <div>
      <Head>
        <title>Users</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <nav
        className="navbar bg-light"
        style={{ borderBottom: "2px solid black" }}
      >
        <div className="container-fluid" style={{ cursor: "pointer" }}>
          <h2 onClick={() => refreshData()}>Workroom Automation</h2>
          <button
            type="button"
            className="btn btn-primary"
            onClick={() => newUserHandler()}
          >
            Add User
          </button>
        </div>
      </nav>

      {newUserModal ? (
        <NewUserModal show={newUserModal} setShow={setNewUserModal} />
      ) : null}
      {deleteModal ? (
        <DeleteUserModal
          show={deleteModal}
          setShow={setDeleteModal}
          user={users[userIdx]}
        />
      ) : null}
      {updateUserModal ? (
        <UpdateUserModal
          show={updateUserModal}
          setShow={setUpdateUserModal}
          user={users[userIdx]}
        />
      ) : null}

      <table className="table table-striped text-center">
        <thead>
          <tr style={{ backgroundColor: "#ff8c00" }}>
            <th scope="col">#</th>
            <th scope="col">First Name</th>
            <th scope="col">Last Name</th>
            <th scope="col">Email (key)</th>
            <th scope="col">Age</th>
            <th scope="col">Profession</th>
            <th></th>
          </tr>
        </thead>
        <tbody>
          {users.map((user, index) => {
            return (
              <tr key={index}>
                <th scope="row">{index + 1}</th>
                <td>{user.firstName}</td>
                <td>{user.lastName}</td>
                <td>{user.email}</td>
                <td>{user.age}</td>
                <td>{user.profession}</td>
                <td>
                  <button
                    type="button"
                    className="btn btn-outline-primary btn-sm"
                    onClick={() => updateHandler(index)}
                  >
                    Update
                  </button>
                  <button
                    type="button"
                    className="btn btn-danger btn-sm"
                    onClick={() => deleteHandler(index)}
                  >
                    Delete
                  </button>
                </td>
              </tr>
            );
          })}
        </tbody>
      </table>
      {users.length === 0 ? (
        <div className="alert alert-danger text-center" role="alert">
          No users found
        </div>
      ) : null}
    </div>
  );
}

export async function getServerSideProps(context) {
  try {
    const response = await axios.get(
      `http://${process.env.VERCEL_URL}/api/users/showall`
    );
    return {
      props: {
        users: response.data.users,
      },
    };
  } catch (error) {
    return {
      props: {
        users: [],
      },
    };
  }
}
